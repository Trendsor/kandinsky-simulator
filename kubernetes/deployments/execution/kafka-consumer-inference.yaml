apiVersion: apps/v1
kind: Deployment
metadata:
  name: kafka-consumer-inference
  namespace: trading-bot-execution
  labels:
    app: kafka-consumer-inference
spec:
  replicas: 1
  selector:
    matchLabels:
      app: kafka-consumer-inference
  template:
    metadata:
      labels:
        app: kafka-consumer-inference
    spec:
      containers:
      - name: kafka-consumer-inference
        image: mhupp/kafka-consumer-inference:latest # Replace with your Docker Hub image
        imagePullPolicy: Always
        env:
        # Kafka Configuration
        - name: KAFKA_BOOTSTRAP_SERVER
          valueFrom:
            secretKeyRef:
              name: kafka-secrets
              key: KAFKA_BOOTSTRAP_SERVER
        # Broker Configuration
        - name: BROKER_API_KEY
          valueFrom:
            secretKeyRef:
              name: broker-data-api-secret
              key: BROKER_API_KEY
        - name: BROKER_API_SECRET
          valueFrom:
            secretKeyRef:
              name: broker-data-api-secret
              key: BROKER_API_SECRET
        - name: BROKER_API_URL
          valueFrom:
            secretKeyRef:
              name: broker-data-api-secret
              key: BROKER_API_URL  
        # Postgres Configuration
        - name: POSTGRES_URL
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: POSTGRES_URL
        - name: MINIO_ENDPOINT
          value: http://minio-svc.trading-bot-model-training.svc.cluster.local:9000
        - name: MINIO_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              name: minio-secret
              key: MINIO_ROOT_USER
        - name: MINIO_SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: minio-secret
              key: MINIO_ROOT_PASSWORD
        # Volume Mounts for Logs
        volumeMounts:
        - name: logs
          mountPath: /app/logs
        
        ports:
        - containerPort: 8080 # Replace with the port your app exposes if needed

      volumes:
      - name: logs
        emptyDir: {}

      restartPolicy: Always

---
apiVersion: v1
kind: Service
metadata:
  name: kafka-consumer-inference
  namespace: trading-bot-execution
  labels:
    app: kafka-consumer-inference
spec:
  selector:
    app: kafka-consumer-inference
  ports:
    - protocol: TCP
      port: 80
      targetPort: 8080
  type: ClusterIP
